var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});

// vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";

// plugins/virtual-module.ts
var virtualFibModuleId = "virtual:fib";
var resolveFibModuleId = "\0" + virtualFibModuleId;
var virtualEnvModuleId = "virtual:env";
var resolveEnvModuleId = "\0" + virtualEnvModuleId;
function virtualFibModulePlugin() {
  let config = null;
  return {
    name: "vite-plugin-virtual-module",
    configResolved(c) {
      config = c;
    },
    resolveId(id) {
      if (id === virtualFibModuleId) {
        return resolveFibModuleId;
      }
      if (id === virtualEnvModuleId) {
        return resolveEnvModuleId;
      }
    },
    load(id) {
      if (id === resolveFibModuleId) {
        return `export default function fib(n) { return n <= 1 ? n : fib(n-1) + fib(n - 2); }`;
      }
      if (id === resolveEnvModuleId) {
        return `export default ${JSON.stringify(config.env)}`;
      }
    }
  };
}

// plugins/test-hooks-plugin.ts
function testHookPlugin() {
  return {
    name: "test-hooks-plugin",
    config(config) {
      console.log("config=>");
    },
    configResolved(resolveConfig) {
      console.log("resolveConfig=>");
    },
    options(opts) {
      console.log("options");
      return opts;
    },
    configureServer(server) {
      console.log("configServe=>");
    },
    buildStart() {
      console.log("buildStart=>");
    },
    buildEnd() {
      console.log("buildEnd=>");
    },
    closeBundle() {
      console.log("closeBundle=>");
    }
  };
}

// plugins/svgt.ts
import fs from "fs";
import resolve from "resolve";
function viteSvgrPlugin(options) {
  const { defaultExport = "url" } = options;
  return {
    name: "vite-plugin-svgr",
    async transform(code, id) {
      if (!id.endsWith(".svg"))
        return code;
      console.log("code", code);
      const svgImport = await import("@svgr/core");
      const svgrTransform = svgImport["transform"];
      const esbuildPackagePath = resolve.sync("esbuild", { basedir: __require.resolve("vite") });
      const esbuild = __require(esbuildPackagePath);
      const svg = await fs.promises.readFile(id, "utf8");
      const svgResult = await svgrTransform(svg, {}, { componentName: "ReactComponent" });
      let componentCode = svgResult;
      if (defaultExport === "url") {
        componentCode += code;
        componentCode = svgResult.replace("export default ReactComponent", "export { ReactComponent }");
      }
      const result = await esbuild.transform(componentCode, {
        loader: "jsx"
      });
      return {
        code: result.code,
        map: null
      };
    }
  };
}

// vite.config.ts
var vite_config_default = defineConfig({
  plugins: [react(), virtualFibModulePlugin(), viteSvgrPlugin({ defaultExport: "component" }), testHookPlugin()]
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
